00000001 b wp_control
00000001 b GPS_enabled
00000001 b fast_corner
00000001 b home_is_set
00000001 b motor_light
00000001 b yaw_stopped
00000001 b CH7_toy_flag
00000001 b CH7_wp_index
00000001 b control_mode
00000001 b gps_watchdog
00000001 d yaw_tracking
00000001 d land_complete
00000001 b throttle_mode
00000001 b mavlink_active
00000001 b prev_nav_index
00000001 b wp_verify_byte
00000001 b alt_change_flag
00000001 b alt_sensor_flag
00000001 b command_yaw_dir
00000001 b failsafeCounter
00000001 b loiter_override
00000001 b new_radio_frame
00000001 b roll_pitch_mode
00000001 b rtl_reached_alt
00000001 b counter_one_herz
00000001 b in_mavlink_delay
00000001 b slow_loopCounter
00000001 b takeoff_complete
00000001 b oldSwitchPosition
00000001 b command_cond_index
00000001 b medium_loopCounter
00000001 b command_yaw_relative
00000001 b copter_leds_GPS_blink
00000001 b copter_leds_nav_blink
00000001 b auto_disarming_counter
00000001 b reset_throttle_counter
00000001 b copter_leds_motor_blink
00000001 b nav_ok
00000001 b do_flip
00000001 b slow_wp
00000001 b CH7_flag
00000001 b event_id
00000001 b failsafe
00000001 b flip_dir
00000001 b led_mode
00000001 b yaw_mode
00000001 b GPS_light
00000001 b do_simple
00000001 b yaw_timer
00000001 b update_simple_mode()::simple_counter
00000001 d update_GPS()::ground_start_count
00000001 b dancing_light()::step
00000001 b init_arm_motors()::did_ground_start
00000001 b read_control_switch()::switch_debouncer
00000001 d do_jump()::jump
00000001 B flip_state
00000001 B flip_timer
00000001 B isr_registry
00000001 B lim_old_state
00000001 B lim_state
00000001 B param_loader
00000001 B relay
00000002 T userhook_50Hz()
00000002 T userhook_init()
00000002 b climb_rate
00000002 b loiter_sum
00000002 b sonar_rate
00000002 b angle_boost
00000002 b event_delay
00000002 b event_value
00000002 b control_roll
00000002 b event_repeat
00000002 b loiter_total
00000002 b nav_throttle
00000002 b x_rate_error
00000002 b y_rate_error
00000002 b control_pitch
00000002 b gps_fix_count
00000002 b landing_boost
00000002 b x_actual_speed
00000002 b y_actual_speed
00000002 b ground_detector
00000002 b loiter_time_max
00000002 b waypoint_radius
00000002 b climb_rate_error
00000002 b command_yaw_time
00000002 b crosstrack_error
00000002 b event_undo_value
00000002 b perf_mon_counter
00000002 b climb_rate_actual
00000002 b command_nav_index
00000002 b command_yaw_speed
00000002 b auto_level_counter
00000002 b saved_toy_throttle
00000002 b waypoint_speed_gov
00000002 b superslow_loopCounter
00000002 b g_gps
00000002 b nav_lat
00000002 b nav_lon
00000002 b baro_rate
00000002 b sonar_alt
00000002 W AP_AHRS_HIL::reset(bool)
00000002 W AP_AHRS_HIL::update()
00000002 W AP_IMU_Shim::init_accel(void (*)(unsigned long), void (*)(bool))
00000002 W AP_IMU_Shim::init(IMU::Start_style, void (*)(unsigned long), void (*)(bool), AP_PeriodicProcess*)
00000002 W AP_IMU_Shim::init_gyro(void (*)(unsigned long), void (*)(bool))
00000002 W Filter<int>::reset()
00000002 W Filter<long>::reset()
00000002 W AP_AHRS::init()
00000002 b arm_motors()::arming_counter
00000002 B ins
00000002 B timer_scheduler
00000002 B xLeadFilter
00000002 B yLeadFilter
00000003 r print_enabled(unsigned char)::__c
00000004 b auto_pitch
00000004 d cos_roll_x
00000004 b long_error
00000004 d cos_pitch_x
00000004 b event_timer
00000004 b loiter_time
00000004 d scaleLongUp
00000004 b circle_angle
00000004 b gps_base_alt
00000004 b loiter_timer
00000004 b current_amps1
00000004 b home_distance
00000004 b last_gps_time
00000004 b nav_loopTimer
00000004 d scaleLongDown
00000004 b altitude_error
00000004 b current_total1
00000004 b fast_loopTimer
00000004 b target_bearing
00000004 b command_yaw_end
00000004 b condition_start
00000004 b condition_value
00000004 d battery_voltage1
00000004 b command_yaw_delta
00000004 b command_yaw_start
00000004 b fiftyhz_loopTimer
00000004 b old_target_bearing
00000004 b throttle_integrator
00000004 b command_yaw_start_time
00000004 b home_to_copter_bearing
00000004 b initial_simple_bearing
00000004 b original_target_bearing
00000004 d G_Dt
00000004 b dTnav
00000004 b nav_yaw
00000004 b of_roll
00000004 b auto_yaw
00000004 b baro_alt
00000004 b nav_roll
00000004 b of_pitch
00000004 b auto_roll
00000004 d cos_yaw_x
00000004 b lat_error
00000004 b nav_pitch
00000004 b sin_yaw_y
00000004 W AP_IMU_Shim::new_data_available()
00000004 W FilterWithBuffer<int, (unsigned char)5>::get_filter_size()
00000004 W FilterWithBuffer<long, (unsigned char)3>::get_filter_size()
00000004 W FilterWithBuffer<long, (unsigned char)5>::get_filter_size()
00000004 W Filter<int>::apply(int)
00000004 b update_simple_mode()::simple_cos_x
00000004 b update_simple_mode()::simple_sin_y
00000004 b update_throttle_mode()::throttle_avg
00000004 b get_rate_roll(long)::last_rate
00000004 b mavlink_delay(unsigned long)::last_5s
00000004 b mavlink_delay(unsigned long)::last_1hz
00000004 b mavlink_delay(unsigned long)::last_50hz
00000004 r print_enabled(unsigned char)::__c
00000004 b get_rate_pitch(long)::last_rate
00000004 b update_altitude()::old_baro_alt
00000004 b calc_XY_velocity()::last_latitude
00000004 b calc_XY_velocity()::last_longitude
00000004 B float_int
00000004 B pitch_axis
00000004 B pitch_scale_d
00000004 B roll_axis
00000004 B roll_scale_d
00000004 B tuning_value
00000004 B wp_distance
00000006 t send_limits_status(mavlink_channel_t)
00000006 W Filter<long>::apply(long)
00000006 V vtable for AP_AnalogSource
00000006 r report_gps()::__c
00000006 r load_parameters()::__c
00000007 b planner_menu
00000007 b board_voltage()::vcc
00000007 b read_battery()::current_pin
00000007 b read_battery()::bat_pin
00000007 r print_enabled(unsigned char)::__c
00000008 b guard variable for board_voltage()::vcc
00000008 b guard variable for read_battery()::current_pin
00000008 b guard variable for read_battery()::bat_pin
00000008 r __menu_name__planner_menu
00000008 V vtable for Filter<int>
00000008 V vtable for Filter<long>
0000000a T piezo_on()
0000000a T piezo_off()
0000000a t copter_leds_GPS_on()
0000000a W AP_AHRS_HIL::get_error_rp()
0000000a W AP_AHRS_HIL::get_error_yaw()
0000000a W AP_IMU_Shim::get_gyro_drift_rate()
0000000a W AP_IMU_Shim::ax()
0000000a W AP_IMU_Shim::ay()
0000000a W AP_IMU_Shim::az()
0000000a W AP_IMU_Shim::gx()
0000000a W AP_IMU_Shim::gy()
0000000a W AP_IMU_Shim::gz()
0000000a V vtable for ModeFilter<int, (unsigned char)5>
0000000a V vtable for AverageFilter<long, float, (unsigned char)3>
0000000a V vtable for AverageFilter<long, float, (unsigned char)5>
0000000a V vtable for FilterWithBuffer<int, (unsigned char)5>
0000000a V vtable for FilterWithBuffer<long, (unsigned char)3>
0000000a V vtable for FilterWithBuffer<long, (unsigned char)5>
0000000a T setup
0000000b B gpslock_limit
0000000c b omega
0000000c T GCS_MAVLINK::send_text(gcs_severity, char const*)
0000000c r report_version()::__c
0000000d r startup_ground()::__c
0000000e t send_statustext(mavlink_channel_t)
0000000e r init_arm_motors()::__c
0000000f b current_loc
0000000f b filtered_loc
0000000f b command_nav_queue
0000000f b command_cond_queue
0000000f b home
0000000f b next_WP
0000000f b prev_WP
0000000f b circle_WP
0000000f b guided_WP
0000000f b target_WP
0000000f B sonar_mode_filter
00000010 r planner_menu_commands
00000010 T GCS_MAVLINK::send_message(ap_message)
00000010 r GCS_MAVLINK::handleMessage(__mavlink_message*)::__c
00000010 r GCS_MAVLINK::handleMessage(__mavlink_message*)::__c
00000010 t mavlink_get_channel_buffer
00000010 t mavlink_get_channel_status
00000010 B pitch_rate_d_filter
00000010 B roll_rate_d_filter
00000011 r init_disarm_motors()::__c
00000012 B APM_RC
00000012 t get_acro_yaw(long)
00000012 t reset_throttle_I()
00000013 r init_compass()::__c
00000013 r GCS_MAVLINK::handleMessage(__mavlink_message*)::__c
00000013 B altitude_limit
00000014 T GCS_MAVLINK::GCS_MAVLINK()
00000014 T GCS_MAVLINK::GCS_MAVLINK()
00000014 V vtable for AP_AHRS_HIL
00000014 V vtable for AP_AHRS
00000014 r limits_loop()::__c
00000014 r mavlink_delay(unsigned long)::__c
00000015 r load_parameters()::__c
00000015 r GCS_MAVLINK::handleMessage(__mavlink_message*)::__c
00000015 r GCS_MAVLINK::handleMessage(__mavlink_message*)::__c
00000016 T piezo_beep()
00000016 W AP_AHRS_HIL::get_gyro()
00000016 r limits_loop()::__c
00000016 r init_ardupilot()::__c
00000016 B adc
00000016 t mav_array_memcpy
00000018 B DataFlash
00000018 b mavlink_get_channel_status::m_mavlink_status
00000018 B baro_filter
0000001a T flash_leds(bool)
0000001a T output_min()
0000001a t gcs_update()
0000001a t gcs_data_stream_send()
0000001a W FilterWithBuffer<int, (unsigned char)5>::reset()
0000001c t startup_ground()
0000001c t reset_stability_I()
0000001c r limits_loop()::__c
0000001c r limits_loop()::__c
0000001d B Serial
0000001d B Serial1
0000001d B Serial3
0000001d r GCS_MAVLINK::handleMessage(__mavlink_message*)::__c
0000001e W FilterWithBuffer<long, (unsigned char)3>::reset()
0000001f r limits_loop()::__c
0000001f r limits_loop()::__c
0000001f r init_ardupilot()::__c
00000020 W AverageFilter<long, float, (unsigned char)3>::reset()
00000020 r arm_motors()::__c
00000020 r limits_loop()::__c
00000020 r limits_loop()::__c
00000021 r limits_loop()::__c
00000021 r limits_loop()::__c
00000022 t clear_leds()
00000022 V vtable for AP_IMU_Shim
00000022 r arm_motors()::__c
00000022 r limits_loop()::__c
00000024 t reset_rate_I()
00000024 V vtable for AP_InertialSensor
00000024 r load_parameters()::__c
00000026 W AP_AHRS_HIL::get_gyro_drift()
00000026 r limits_loop()::__c
00000027 B limits
00000028 t init_commands()
00000028 t gcs_send_message(ap_message)
00000028 r init_ardupilot()::__c
0000002a T update_toy_throttle()
0000002e t print_divider()
0000002e W FilterWithBuffer<int, (unsigned char)5>::apply(int)
0000002e W FilterWithBuffer<long, (unsigned char)5>::reset()
00000030 t do_land()
00000030 W AverageFilter<long, float, (unsigned char)5>::reset()
00000032 T init_flip()
00000033 b pending_status
00000033 r limits_loop()::__c
00000036 t gcs_send_text_P(gcs_severity, prog_char_t const*)
00000036 t send_current_waypoint(mavlink_channel_t)
00000038 t init_disarm_motors()
00000038 t mavlink_msg_statustext_send
0000003a T GCS_MAVLINK::init(FastSerial*)
0000003c t reset_wind_I()
0000003c t send_meminfo(mavlink_channel_t)
0000003c t send_hwstatus(mavlink_channel_t)
0000003c W FilterWithBuffer<long, (unsigned char)3>::apply(long)
0000003c W FilterWithBuffer<long, (unsigned char)5>::apply(long)
0000003e t exit_mission()
0000003e t gcs_send_text(gcs_severity, char const*)
0000003e T GCS_MAVLINK::send_text(gcs_severity, prog_char_t const*)
0000003e B imu
00000040 t crc_accumulate
00000042 t init_compass()
00000042 t copter_leds_GPS_slow_blink()
00000042 t do_jump()
00000048 t copter_leds_slow_blink()
0000004a B ahrs
0000004c B gcs0
0000004c B gcs3
00000050 t find_next_nav_index(int)
00000052 t copter_leds_on()
00000052 t copter_leds_off()
00000052 W AP_IMU_Shim::update()
00000052 T GCS_MAVLINK::stream_trigger(GCS_MAVLINK::streams)
00000054 T board_voltage()
00000054 t reset_I_all()
00000054 t print_enabled(unsigned char)
00000056 t dancing_light()
00000056 T GCS_MAVLINK::_count_parameters()
00000059 B g_gps_driver
0000005a t report_gps()
0000005a T GCS_MAVLINK::queued_waypoint_send()
00000060 b mavlink_queue
00000060 t _mavlink_send_uart
00000062 t update_auto_yaw()
00000068 t change_command(unsigned char)
0000006a B barometer
0000006c t set_new_altitude(long)
00000070 t planner_gcs(unsigned char, Menu::arg const*)
00000072 t report_version()
00000074 t update_GPS_light()
00000074 t mavlink_msg_param_value_send
00000078 t send_ahrs(mavlink_channel_t)
0000007a t send_servo_out(mavlink_channel_t)
0000007c t set_failsafe(unsigned char)
0000007c t check_missed_wp()
0000007e T mavlink_send_text(mavlink_channel_t, gcs_severity, char const*)
00000080 t gcs_send_text_fmt(prog_char_t const*, ...)
00000080 T __vector_25
00000080 T __vector_36
00000080 T __vector_54
00000086 t send_heartbeat(mavlink_channel_t)
00000088 t send_gps_status(mavlink_channel_t)
0000008c W AP_AHRS_HIL::get_dcm_matrix()
00000096 t send_radio_out(mavlink_channel_t)
00000096 t init_arm_motors()
0000009a t send_radio_in(mavlink_channel_t)
0000009a B motors
0000009e t do_RTL()
0000009e B compass
000000a4 T __vector_26
000000a4 T __vector_37
000000a4 T __vector_55
000000ac t read_control_switch()
000000b8 W AverageFilter<long, float, (unsigned char)5>::apply(long)
000000bd B geofence_limit
000000be t update_events()
000000c2 t send_raw_imu2(mavlink_channel_t)
000000c6 W AverageFilter<long, float, (unsigned char)3>::apply(long)
000000c8 t send_attitude(mavlink_channel_t)
000000d0 T update_toy_altitude()
000000d2 T limits_send_mavlink_status(mavlink_channel_t)
000000d2 t verify_land_baro()
000000d4 t get_desired_speed(int, bool)
000000d4 t get_stabilize_roll(long)
000000d4 t get_stabilize_pitch(long)
000000d8 T GCS_MAVLINK::queued_param_send()
000000dc t verify_land_sonar()
000000e0 b mavlink_get_channel_buffer::m_mavlink_buffer
000000e6 R GCS_MAVLINK::var_info
000000f0 W ModeFilter<int, (unsigned char)5>::apply(int)
000000f4 t heli_get_angle_boost(int)
000000fc t send_raw_imu3(mavlink_channel_t)
000000fe t _mav_finalize_message_chan_send
00000100 r mavlink_parse_char::mavlink_message_crcs
00000104 t get_rate_yaw(long)
0000010a t send_vfr_hud(mavlink_channel_t)
0000010e t arm_motors()
0000010e t get_throttle_rate(int)
0000011c t get_cmd_with_index(int)
00000142 t init_home()
00000148 t send_nav_controller_output(mavlink_channel_t)
0000014c T set_recovery_home_alt()
00000152 T roll_flip()
00000154 t mavlink_delay(unsigned long)
00000164 t set_cmd_with_index(Location, int)
00000168 t verify_nav_wp()
0000017a t read_radio()
00000182 t get_stabilize_yaw(long)
00000184 t get_rate_roll(long)
00000184 t get_rate_pitch(long)
00000184 t mavlink_send_message(mavlink_channel_t, ap_message, unsigned int)
00000190 t load_parameters()
0000019a T GCS_MAVLINK::data_stream_send()
0000019e T roll_pitch_toy()
000001ac t send_raw_imu1(mavlink_channel_t)
000001b4 T GCS_MAVLINK::update()
000001bc T update_simple_mode()
000001bc t send_location(mavlink_channel_t)
000001c0 t read_battery()
000001da t send_extended_status1(mavlink_channel_t, unsigned int)
000001dc t calc_XY_velocity()
000001ec t mavlink_try_send_message(mavlink_channel_t, ap_message, unsigned int)
00000224 t set_next_WP(Location*)
00000240 t update_GPS()
0000028a T update_yaw_mode()
0000028e t update_altitude()
000002a8 t send_gps_raw(mavlink_channel_t)
000002b2 t calc_loiter(int, int)
0000031c t set_mode(unsigned char)
0000035a t calc_nav_rate(int)
0000037e t execute_nav_command()
000003b0 b g
00000422 T update_throttle_mode()
00000448 t update_nav_wp()
0000053a t mavlink_parse_char
0000057a t init_ardupilot()
00000648 t limits_loop()
0000076c T update_roll_pitch_mode()
000008ce R var_info
000009e2 t global constructors keyed to Serial
00001b84 T GCS_MAVLINK::handleMessage(__mavlink_message*)
00001f80 T loop
